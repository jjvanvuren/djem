from django.contrib.messages.storage.fallback import FallbackStorage
from django.test import TestCase
from django.test.client import RequestFactory
from django.utils.six.moves.urllib.parse import urlsplit, urlunsplit


class RequestFactoryTestCase(TestCase):
    """
    Extension of Django's `TestCase` that enables easy creation of custom
    `HttpRequest` objects via Django's `RequestFactory`, for situations where the
    test client is not suitable.
    
    Simply call `get_request`, passing the url to simulate the request to. It
    will return a `HttpRequest` object generated by a `RequestFactory`.
    This request will also be annotated with the appropriate attributes to
    simulate the Django Messages Framework, enabling it to be used to test
    views that make use of such messages.
    It will also be annotated with a user object. If `create_user` is True (it
    is True by default), `_get_user` will be used to create a test user. If
    `create_user` is False, `AnonymousUser` will be used. In either case, the
    user will be accessible via `self.user` within test methods.
    
    By default `_get_user` will attempt to create a user with a username and
    password. If using a custom User model with different required fields,
    override `_get_user` to create the User object appropriately.
    
    `RequestFactoryTestCase` also overrides `SimpleTestCase`'s `assertRedirects`
    method, altering the passed `HttpResponse` object so that the redirect can
    be followed and compared correctly (which would otherwise not work for
    responses not generated by the test `Client`).
    """
    
    create_user = True
    
    def _pre_setup(self, *args, **kwargs):
        """
        Wrapper around Django's SimpleTestCase._pre_setup(). Used so that
        user-defined test cases don't need to include a call to super().setUp().
        """
        
        from django.contrib.auth.models import AnonymousUser
        
        if self.create_user:
            self.user = self._get_user()
        else:
            self.user = AnonymousUser()
        
        self.factory = RequestFactory()
        
        super(RequestFactoryTestCase, self)._pre_setup(*args, **kwargs)
    
    def _get_user(self):
        
        from django.contrib.auth import get_user_model
        
        User = get_user_model()
        
        try:
            return User.objects.get(username='tester')
        except User.DoesNotExist:
            return User.objects.create_user(username='tester', password='top_secret')
    
    def get_request(self, url):
        """
        Return a request generated by RequestFactory.
        The request is annotated such that it works with the Django Messages
        Framework, despite RequestFactory not supporting middleware.
        """
        
        request = self.factory.get(url)
        
        request.user = self.user
        
        # Simulate support for Django messages framework. Required due to
        # RequestFactory not supporting middleware.
        # Workaround as noted here: https://code.djangoproject.com/ticket/17971
        setattr(request, 'session', 'session')
        messages = FallbackStorage(request)
        setattr(request, '_messages', messages)
        
        return request
    
    def assertRedirects(self, response, *args, **kwargs):
        """
        Wrapper around Django's SimpleTestCase.assertRedirects(). Adjusts the
        response from a RequestFactory request to make it suitable for use by
        assertRedirects.
        """
        
        if not hasattr(response, 'client'):
            # Add Django TestClient attribute to the response - required to follow
            # the redirect. Manually added in the case the response was not
            # generated via the TestClient.
            response.client = self.client
        
        if not hasattr(response, 'redirect_chain'):
            # Not a followed redirect
            
            # Convert to the absolute url for the testserver unless an absolute
            # url is given. This prevents errors with assertRedirects
            # comparisons.
            scheme, netloc, path, query, fragment = urlsplit(response.url)
            if not (scheme or netloc):
                response['Location'] = urlunsplit(('http', 'testserver', path, query, fragment))
        
        return super(RequestFactoryTestCase, self).assertRedirects(response, *args, **kwargs)
